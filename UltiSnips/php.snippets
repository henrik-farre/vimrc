global !p
from vimsnippets import *
endglobal

snippet fun "function with dynamic docblock" b
`!p
# Currently Ultisnips does not support dynamic tabstops, so we cannot add
# tabstops to the datatype for these param tags until that feature is added.
def formatTag(argument):
	return " * @param mixed {0}".format(argument)

arguments = t[3].split(',')
arguments = [argument.strip() for argument in arguments if argument]

if len(arguments):
	tags = map(formatTag, arguments)
	snip.rv = "/**"
	for tag in tags:
		snip += tag
	snip += ' */'
	snip += ''
else:
	snip.rv = ''
`${1:public }function ${2:FunctionName}(${3})
{
  ${4:// code...}
}
endsnippet

snippet inc
include '${1:file}';${2}
endsnippet

snippet inc1
include_once '${1:file}';${2}
endsnippet

snippet req
require '${1:file}';${2}
endsnippet

snippet req1
require_once '${1:file}';${2}
endsnippet

snippet $_ "COOKIE['...']"
$_COOKIE['${1:variable}']${2}
endsnippet

snippet $_ "ENV['...']"
$_ENV['${1:variable}']${2}
endsnippet

snippet $_ "FILES['...']"
$_FILES['${1:variable}']${2}
endsnippet

snippet $_ "GET['...']"
$_GET['${1:variable}']${2}
endsnippet

snippet $_ "POST['...']"
$_POST['${1:variable}']${2}
endsnippet

snippet $_ "REQUEST['...']"
$_REQUEST['${1:variable}']${2}
endsnippet

snippet $_ "SERVER['...']"
$_SERVER['$1`!p snip.rv=complete(t[1], ['REMOTE_ADDR','REQUEST_URI','SERVER_NAME'])`']
endsnippet

snippet $_ "SESSION['...']"
$_SESSION['${1:variable}']${2}
endsnippet

snippet def?
${1}defined('${2}')${3}
endsnippet

snippet wh
while (${1:/* condition */})
{
  ${2:// code...}
}
endsnippet

snippet do "do"
do
{
  ${2:// code... }
} while (${1:/* condition */});
endsnippet

snippet if
if (${1:/* condition */})
{
  ${2:// code...}
}
endsnippet

snippet ife
if (${1:/* condition */})
{
  ${2:// code...}
}
else
{
  ${3:// code...}
}
${4}
endsnippet

snippet else "else"
else
{
  ${1:// code...}
}
endsnippet

snippet elseif
elseif (${1:/* condition */})
{
  ${2:// code...}
}
endsnippet

snippet switch
switch ($${1:variable})
{
  case '${2:value}':
    ${3:// code...}
    break;
  ${5}
  default:
    ${4:// code...}
    break;
}
endsnippet

snippet case
case '${1:value}':
  ${2:// code...}
  break;${3}
endsnippet

snippet foreach
foreach ($${1:variable} as $${2:key})
{
  ${3:// code...}
}
endsnippet

snippet ERR
error_log(__LINE__.':'.__FILE__.' '${VISUAL}$0); // `!v g:snips_author` debugging
endsnippet

snippet ERRP
error_log(__LINE__.':'.__FILE__.' '.print_r(${VISUAL}$0, 1)); // `!v g:snips_author` debugging
endsnippet

snippet hf
// `!v g:snips_author`, `!v strftime('%d-%b-%Y')`: ${1:} -->>
${2}
// <<-- `!v g:snips_author`, `!v strftime('%d-%b-%Y')`: $1
endsnippet

snippet while
while (${1:/* condition */})
{
  ${2:// code...}
}

endsnippet

snippet header "location"
header('Location: http://${1:www.example.com}/');

endsnippet

snippet header "content"
header('Content-Type: ${1:text/html}; charset=${2:UTF-8}');

endsnippet

snippet try
try
{
  ${1}
}
catch (Exception ${2:$e})
{
  ${3}
}

endsnippet

snippet xdb
xdebug_break();
endsnippet

snippet class "Basic class with namespace snippet"
<?php

namespace `!p snip.rv=namespace(path)`;
/**
* @author ${1:`!v g:snips_author`}
*/
class `!p
snip.rv = re.match(r'.*(?=\.)', fn).group()
`$2
{
  $3
}
endsnippet

snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
${4:// code...}
}
endsnippet
